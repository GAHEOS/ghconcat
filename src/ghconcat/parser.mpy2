import argparse

DEFAULT_OPENAI_MODEL = 'o3'


def _build_parser() -> argparse.ArgumentParser:
    """
    Construct and return an `argparse.ArgumentParser` instance for **one**
    context block.  The parser intentionally omits any legacy GAHEOS v1
    switches and follows GAHEOS v2 semantics exclusively.
    """
    p = argparse.ArgumentParser(
        prog="ghconcat",
        formatter_class=argparse.RawTextHelpFormatter,
        usage="%(prog)s [-x FILE] … [OPTIONS]",
        add_help=False,
        description=(
            "ghconcat – multi-level concatenation, slicing & templating tool\n"
            "Everything after a “-x FILE” is parsed inside the directive-file "
            "context unless another “-x” is encountered."
        ),
    )

    g_loc = p.add_argument_group("Discovery")
    g_rng = p.add_argument_group("Line slicing")
    g_cln = p.add_argument_group("Cleaning")
    g_sub = p.add_argument_group("Substitution")
    g_tpl = p.add_argument_group("Template & output")
    g_ai = p.add_argument_group("AI integration")
    g_misc = p.add_argument_group("Miscellaneous")

    g_loc.add_argument(
        "-w", "--workdir", metavar="DIR", dest="workdir",
        help=(
            "Root directory that will be *scanned for content files* in the current "
            "context.  If omitted, the search starts at the current working directory. "
            "Any other relative path (templates, outputs, “‑a PATH”, etc.) is first "
            "resolved against this directory unless a parent context re‑defines it."
        ),
    )
    g_loc.add_argument(
        "-W", "--workspace", metavar="DIR", dest="workspace",
        help=(
            "Folder that holds *templates, prompts, AI artefacts and outputs*.  "
            "Defaults to the current ‑w directory.  Paths given to ‑o/‑t/‑‑ai‑* are "
            "resolved here, keeping project sources and generated files separated."
        ),
    )
    g_loc.add_argument(
        "-a", "--add-path", metavar="PATH", action="append", dest="add_path",
        help=(
            "Add a file **or** directory (recursively) to the inclusion set.  "
            "May be repeated.  Bare CLI tokens that do *not* start with “‑” are "
            "implicitly converted to this flag, so `ghconcat src utils` equals "
            "`ghconcat -a src -a utils`."
        ),
    )
    g_loc.add_argument(
        "-A", "--exclude-path", metavar="DIR", action="append", dest="exclude_path",
        help=(
            "Exclude an entire directory subtree from discovery, overriding any "
            "broader inclusion rule.  Repeatable and honoured *before* suffix filters."
        ),
    )
    g_loc.add_argument(
        "-f", "--url", metavar="URL", action="append", dest="urls",
        help=(
            "Download a single remote resource and cache it under "
            "<workspace>/.ghconcat_urlcache.  Its contents are then processed as if "
            "it were a local file, subject to the same suffix, slicing and cleaning "
            "rules that apply to files added with ‑a."
        ),
    )
    g_loc.add_argument(
        "-F", "--url-scrape", metavar="URL", action="append", dest="url_scrape",
        help=(
            "Start a *depth‑limited crawler* at each seed URL, downloading every "
            "linked resource that matches the current suffix / exclusion filters.  "
            "Links with no extension are assumed to be “.html” for filtering purposes."
        ),
    )
    g_loc.add_argument(
        "-d", "--url-scrape-depth", metavar="N", type=int,
        dest="url_scrape_depth", default=2,
        help=(
            "Maximum recursion depth for ‑F/‑‑url‑scrape (default: 2).  "
            "`0` means scrape only the seed page itself, without following links."
        ),
    )
    g_loc.add_argument(
        "-D", "--disable-same-domain", action="store_true",
        dest="disable_url_domain_only",
        help=(
            "Allow the scraper (‑F) to follow links *outside* the seed’s scheme+host.  "
            "Without this flag, ghconcat remains confined to the original domain."
        ),
    )
    g_loc.add_argument(
        "-g", "--git-path", metavar="SPEC", action="append", dest="git_path",
        help=(
            "Include sources from a remote *Git* repository.  "
            "SPEC → URL[^BRANCH][/SUBPATH].  If BRANCH is omitted the default "
            "branch is used; if SUBPATH is omitted the whole repository is scanned."
        ),
    )
    g_loc.add_argument(
        "-G", "--git-exclude", metavar="SPEC", action="append", dest="git_exclude",
        help="Exclude a file or subtree inside a repository previously added with -g.",
    )
    g_loc.add_argument(
        "-s", "--suffix", metavar="SUF", action="append", dest="suffix",
        help=(
            "Whitelist extensions (e.g. “.py”).  If at least one ‑s is present, the "
            "suffix filter becomes *positive* (everything else is ignored unless "
            "explicitly whitelisted by another rule).  Repeatable."
        ),
    )
    g_loc.add_argument(
        "-S", "--exclude-suffix", metavar="SUF", action="append", dest="exclude_suf",
        help=(
            "Blacklist extensions irrespective of origin (local or remote).  "
            "An explicit file added with ‑a always wins over an exclusion suffix."
        ),
    )

    g_rng.add_argument(
        "-n", "--total-lines", metavar="NUM", type=int, dest="total_lines",
        help=(
            "Keep at most NUM lines from each file *after* header adjustments.  "
            "Combine with ‑N to create sliding windows."
        ),
    )
    g_rng.add_argument(
        "-N", "--start-line", metavar="LINE", type=int, dest="first_line",
        help=(
            "Start concatenation at 1‑based line LINE.  Headers before this line are "
            "kept or removed according to ‑m / ‑M."
        ),
    )
    g_rng.add_argument(
        "-m", "--keep-first-line", dest="first_flags",
        action="append_const", const="keep",
        help=(
            "Always retain the very first physical line (shebang, encoding cookie, "
            "XML prolog, etc.) even if slicing starts after it."
        ),
    )
    g_rng.add_argument(
        "-M", "--no-first-line", dest="first_flags",
        action="append_const", const="drop",
        help="Force‑drop the first physical line regardless of other slicing flags.",
    )
    g_sub.add_argument(
        "-y", "--replace", metavar="SPEC", action="append",
        dest="replace_rules",
        help=(
            "Delete or substitute *text fragments* that match SPEC.  The syntax is "
            "strictly `/pattern/`    → delete matches, or\n"
            "         `/patt/repl/flags` where flags ∈ {g,i,m,s}.  Delimiter is `/` "
            "and may be escaped inside the pattern/replacement with `\\/`.  The "
            "pattern is a Python‑style regex.  Invalid patterns are logged and "
            "silently ignored."
        ),
    )
    g_sub.add_argument(
        "-Y", "--preserve", metavar="SPEC", action="append",
        dest="preserve_rules",
        help=(
            "Regex exceptions for `-y`.  Any region matched by a PRESERVE rule is "
            "temporarily shielded from the replace engine and restored afterwards.  "
            "Same delimiter, escaping and flag rules as `-y`."
        ),
    )

    g_cln.add_argument(
        "-c", "--remove-comments", action="store_true", dest="rm_simple",
        help="Remove *inline* comments while keeping full‑line comments intact.",
    )
    g_cln.add_argument(
        "-C", "--remove-all-comments", action="store_true", dest="rm_all",
        help="Remove **all** comments, including full‑line ones.",
    )
    g_cln.add_argument(
        "-i", "--remove-import", action="store_true", dest="rm_import",
        help="Strip `import`, `require`, `use`, `#include` statements as supported.",
    )
    g_cln.add_argument(
        "-I", "--remove-export", action="store_true", dest="rm_export",
        help="Strip `export` / `module.exports` declarations in JS/TS-like files.",
    )
    g_cln.add_argument(
        "-b", "--strip-blank", dest="blank_flags",
        action="append_const", const="strip",
        help="Delete blank lines left after cleaning.",
    )
    g_cln.add_argument(
        "-B", "--keep-blank", dest="blank_flags",
        action="append_const", const="keep",
        help="Preserve blank lines (overrides an inherited ‑b).",
    )
    g_cln.add_argument(
        "-K", "--textify-html", action="store_true", dest="strip_html",
        help="Convert every *.html* file to plain-text (tags removed) before concatenation.",
    )

    g_tpl.add_argument(
        "-t", "--template", metavar="FILE", dest="template",
        help=(
            "Render the current context through a minimalist Jinja-style template. "
            "Placeholders use single braces `{var}` and see per-context variables, "
            "`ghconcat_dump`, plus values set via -e/-E.  **Not inherited**."
        ),
    )
    g_tpl.add_argument(
        "-T", "--child-template", metavar="FILE", dest="child_template",
        help=(
            "Set a *default template for descendant contexts only*. Acts as if each "
            "child had provided its own `-t FILE`. In a given context:\n"
            "  • If both `-t` and `-T` are present, `-t` applies **locally** while "
            "    `-T` updates the default for **subsequent contexts**.\n"
            "  • A child may override the inherited `-T` by specifying its own `-t`, "
            "    or replace it for its own descendants by providing a new `-T`."
        ),
    )
    g_tpl.add_argument(
        "-o", "--output", metavar="FILE", dest="output",
        help=(
            "Write the *final* text to FILE (path resolved against the workspace).  "
            "If omitted at the root context, the result streams to STDOUT."
        ),
    )
    g_tpl.add_argument(
        "-O", "--stdout", action="store_true", dest="to_stdout",
        help=(
            "Always duplicate the final output to STDOUT, even when ‑o is present.  "
            "Useful for piping while still keeping an on‑disk copy."
        ),
    )
    g_tpl.add_argument(
        "-u", "--wrap", metavar="LANG", dest="wrap_lang",
        help=(
            "Wrap every file body in a fenced code‑block.  The info‑string defaults "
            "to LANG; pass an empty string to keep language‑less fences."
        ),
    )
    g_tpl.add_argument(
        "-U", "--no-wrap", action="store_true", dest="unwrap",
        help="Cancel any inherited ‑u/‑‑wrap directive in this child context.",
    )
    g_tpl.add_argument(
        "-h", "--header", dest="hdr_flags",
        action="append_const", const="show",
        help="Emit a heavy banner header before each *new* file (`===== path =====`).",
    )
    g_tpl.add_argument(
        "-H", "--no-headers", dest="hdr_flags",
        action="append_const", const="hide",
        help="Suppress banner headers in this scope (child contexts may re‑enable).",
    )
    g_tpl.add_argument(
        "-r", "--relative-path", dest="path_flags",
        action="append_const", const="relative",
        help="Show header paths relative to the current workdir (default).",
    )
    g_tpl.add_argument(
        "-R", "--absolute-path", dest="path_flags",
        action="append_const", const="absolute",
        help="Show header paths as absolute file‑system paths.",
    )
    g_tpl.add_argument(
        "-l", "--list", action="store_true", dest="list_only",
        help="List matching file paths **instead of** their contents (one per line).",
    )
    g_tpl.add_argument(
        "-L", "--no-list", action="store_true", dest="no_list",
        help="Disable an inherited list mode within this context.",
    )
    g_tpl.add_argument(
        "-e", "--env", metavar="VAR=VAL", action="append", dest="env_vars",
        help=(
            "Define a *local* placeholder visible **only** in the current context.  "
            "Placeholders may reference earlier ones using the `` syntax."
        ),
    )
    g_tpl.add_argument(
        "-E", "--global-env", metavar="VAR=VAL", action="append", dest="global_env",
        help=(
            "Define a *global* placeholder inherited by every descendant context.  "
            "May be overridden locally with ‑e."
        ),
    )

    g_ai.add_argument(
        "--ai", action="store_true",
        help=(
            "Send the rendered text to an OpenAI chat endpoint.  Requires "
            "`OPENAI_API_KEY` in the environment.  The AI reply is written to ‑o "
            "(or to a temp file if ‑o is absent) and exposed as `{_ia_ctx}`."
        ),
    )
    g_ai.add_argument(
        "--ai-model", metavar="MODEL", default=DEFAULT_OPENAI_MODEL, dest="ai_model",
        help="Chat model to use (default: o3).",
    )
    g_ai.add_argument(
        "--ai-temperature", type=float, metavar="NUM", dest="ai_temperature",
        help="Sampling temperature for non‑o* (like gpt‑4o, gpt‑5‑chat) models (range 0–2).",
    )
    g_ai.add_argument(
        "--ai-top-p", type=float, metavar="NUM", dest="ai_top_p",
        help="Top‑p nucleus sampling parameter (chat models).",
    )
    g_ai.add_argument(
        "--ai-presence-penalty", type=float, metavar="NUM", dest="ai_presence_penalty",
        help="Presence‑penalty parameter (chat models).",
    )
    g_ai.add_argument(
        "--ai-frequency-penalty", type=float, metavar="NUM", dest="ai_frequency_penalty",
        help="Frequency‑penalty parameter (chat models).",
    )
    g_ai.add_argument(
        "--ai-system-prompt", metavar="FILE", dest="ai_system_prompt",
        help="Template‑aware system prompt file to prepend to the chat.",
    )
    g_ai.add_argument(
        "--ai-seeds", metavar="FILE", dest="ai_seeds",
        help="JSONL file with seed messages to prime the chat.",
    )
    g_ai.add_argument(
        "--ai-max-tokens", type=int, metavar="NUM", dest="ai_max_tokens",
        help=(
            "Maximum output tokens. For reasoning models (o‑series, gpt‑5 base) "
            "maps to `max_output_tokens` (Responses API). For chat models "
            "(gpt‑4o*, gpt‑5‑chat*) maps to `max_tokens` (Chat Completions)."
        ),
    )
    g_ai.add_argument(
        "--ai-reasoning-effort", metavar="LEVEL", dest="ai_reasoning_effort",
        choices=("low", "medium", "high"),
        help=(
            "Reasoning effort for o‑series/gpt‑5 (Responses API). Ignored by chat "
            "models. Defaults to GHCONCAT_AI_REASONING_EFFORT or 'medium'."
        ),
    )
    g_misc.add_argument(
        "--preserve-cache",
        action="store_true",
        help="Keep the .ghconcat_*cache directories after finishing the run.",
    )
    g_misc.add_argument(
        "--upgrade", action="store_true",
        help="Self‑update ghconcat from the official GAHEOS repository into ~/.bin.",
    )
    g_misc.add_argument(
        "--help", action="help",
        help="Show this integrated help message and exit.",
    )

    return p
